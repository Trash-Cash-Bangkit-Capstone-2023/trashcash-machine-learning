# -*- coding: utf-8 -*-
"""prepare_dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ygvmgk4DJUTwMps0yh4aIWD5aeCuntBp
"""

import os
import shutil
import zipfile
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
import numpy as np

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Ekstrak file zip dataset
dataset_path = '/content/drive/MyDrive/garbage-seg-10-v5.zip' 
extract_path = '/content/dataset'
with zipfile.ZipFile(dataset_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

# Buat folder untuk train, validation, dan test
base_dir = '/content/dataset'
os.makedirs(base_dir, exist_ok=True)

train_dir = os.path.join(base_dir, 'train')
os.makedirs(train_dir, exist_ok=True)

validation_dir = os.path.join(base_dir, 'validation')
os.makedirs(validation_dir, exist_ok=True)

test_dir = os.path.join(base_dir, 'test')
os.makedirs(test_dir, exist_ok=True)

# Kategori sampah yang bisa dijual (sellable)
sellable_categories = ['battery', 'cardboard', 'clothes', 'glass', 'metal', 'paper', 'plastic', 'shoes']

# Kategori sampah yang tidak bisa dijual (unsellable)
unsellable_categories = ['food', 'medical']

# Memindahkan gambar ke folder yang sesuai
for category in sellable_categories:
    category_train_dir = os.path.join(train_dir, 'sellable', category)
    os.makedirs(category_train_dir, exist_ok=True)

    images_dir = os.path.join('/content/dataset/Garbage Seg 10 V5/', category)
    images = os.listdir(images_dir)

    for image in images:
        src_path = os.path.join(images_dir, image)
        dst_path = os.path.join(category_train_dir, image)
        shutil.copy(src_path, dst_path)

for category in unsellable_categories:
    category_train_dir = os.path.join(train_dir, 'unsellable', category)
    os.makedirs(category_train_dir, exist_ok=True)

    images_dir = os.path.join('/content/dataset/Garbage Seg 10 V5/', category)
    images = os.listdir(images_dir)

    for image in images:
        src_path = os.path.join(images_dir, image)
        dst_path = os.path.join(category_train_dir, image)
        shutil.copy(src_path, dst_path)

# Memindahkan sebagian gambar dari train ke validation
for category in sellable_categories:
    category_train_dir = os.path.join(train_dir, 'sellable', category)
    category_validation_dir = os.path.join(validation_dir, 'sellable', category)
    os.makedirs(category_validation_dir, exist_ok=True)

    images = os.listdir(category_train_dir)
    num_images = len(images)
    num_validation_images = int(num_images * 0.2)  # 20% untuk validation

    validation_images = images[:num_validation_images]
    for image in validation_images:
        src_path = os.path.join(category_train_dir, image)
        dst_path = os.path.join(category_validation_dir, image)
        shutil.move(src_path, dst_path)

# Memindahkan sebagian gambar dari train ke test
for category in sellable_categories:
    category_train_dir = os.path.join(train_dir, 'sellable', category)
    category_train_dir = os.path.join(train_dir, 'sellable', category)
    category_test_dir = os.path.join(test_dir, 'sellable', category)
    os.makedirs(category_test_dir, exist_ok=True)

    images = os.listdir(category_train_dir)
    num_images = len(images)
    num_test_images = int(num_images * 0.2)  # 20% untuk test

    test_images = images[:num_test_images]
    for image in test_images:
        src_path = os.path.join(category_train_dir, image)
        dst_path = os.path.join(category_test_dir, image)
        shutil.move(src_path, dst_path)

# Memindahkan sebagian gambar dari train ke validation (unsellable)
for category in unsellable_categories:
    category_train_dir = os.path.join(train_dir, 'unsellable', category)
    category_validation_dir = os.path.join(validation_dir, 'unsellable', category)
    os.makedirs(category_validation_dir, exist_ok=True)

    images = os.listdir(category_train_dir)
    num_images = len(images)
    num_validation_images = int(num_images * 0.2)  # 20% untuk validation

    validation_images = images[:num_validation_images]
    for image in validation_images:
        src_path = os.path.join(category_train_dir, image)
        dst_path = os.path.join(category_validation_dir, image)
        shutil.move(src_path, dst_path)

# Memindahkan sebagian gambar dari train ke test (unsellable)
for category in unsellable_categories:
    category_train_dir = os.path.join(train_dir, 'unsellable', category)
    category_test_dir = os.path.join(test_dir, 'unsellable', category)
    os.makedirs(category_test_dir, exist_ok=True)

    images = os.listdir(category_train_dir)
    num_images = len(images)
    num_test_images = int(num_images * 0.2)  # 20% untuk test

    test_images = images[:num_test_images]
    for image in test_images:
        src_path = os.path.join(category_train_dir, image)
        dst_path = os.path.join(category_test_dir, image)
        shutil.move(src_path, dst_path)

# melihat kelas yang ada di direktori train, validation, dan test: 
train_classes = os.listdir(os.path.join(train_dir))
validation_classes = os.listdir(os.path.join(validation_dir))
test_classes = os.listdir(os.path.join(test_dir))

print("Classes in Train directory:")
print(train_classes)

print("Classes in Validation directory:")
print(validation_classes)

print("Classes in Test directory:")
print(test_classes)

# Augmentasi data pada direktori train
train_datagen = ImageDataGenerator(
    rescale=1.0/255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

# Augmentasi data pada direktori validation dan test
validation_test_datagen = ImageDataGenerator(rescale=1.0/255)

# Menerapkan augmentasi data pada direktori train
train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical'
)

# Menerapkan augmentasi data pada direktori validation
validation_generator = validation_test_datagen.flow_from_directory(
    validation_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical'
)

#Menerapkan augmentasi data pada direktori test
test_generator = validation_test_datagen.flow_from_directory(
    test_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical'
)

# Get a batch of images and labels from the training generator
images, labels = next(train_generator)

# Get the class names
class_names = train_generator.class_indices

# Define the figure size and grid layout
fig, axes = plt.subplots(4, 8, figsize=(12, 8))
axes = axes.ravel()

# Loop through the images and labels, and plot them
for i in range(len(images)):
    # Convert the image from rescaled format to original format
    image = images[i] * 255
    image = image.astype(np.uint8)

    # Get the label index and retrieve the corresponding class name
    label_index = np.argmax(labels[i])
    class_name = list(class_names.keys())[list(class_names.values()).index(label_index)]

    # Plot the image and set the title as the class name
    axes[i].imshow(image)
    axes[i].set_title(class_name)
    axes[i].axis('off')

# Adjust the spacing between subplots
plt.tight_layout()

# Show the plot
plt.show()